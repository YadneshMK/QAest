#!/bin/bash

echo "üöÄ QAest User Approval System - Complete Workflow Test"
echo "========================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

API_BASE="http://localhost:8000"

echo -e "${BLUE}Testing Complete User Approval Workflow...${NC}"
echo ""

# Step 1: Register a new user that requires approval
echo -e "${YELLOW}Step 1: Register new user requiring approval${NC}"
REGISTER_RESPONSE=$(curl -s -X POST "$API_BASE/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "new-qa-engineer",
    "password": "newuser123",
    "email": "newqa@qaest.com",
    "firstName": "New",
    "lastName": "QAEngineer",
    "role": "junior_qa"
  }')

echo "Registration Response:"
echo "$REGISTER_RESPONSE" | jq '.'
echo ""

# Step 2: Try to login with unapproved user (should fail)
echo -e "${YELLOW}Step 2: Try to login with unapproved user (should be blocked)${NC}"
LOGIN_BLOCKED=$(curl -s -X POST "$API_BASE/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "new-qa-engineer",
    "password": "newuser123"
  }')

echo "Login Blocked Response:"
echo "$LOGIN_BLOCKED" | jq '.'
echo ""

# Step 3: Login as QA Lead to manage approvals
echo -e "${YELLOW}Step 3: Login as QA Lead for approval management${NC}"
QA_LEAD_LOGIN=$(curl -s -X POST "$API_BASE/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "qa-lead",
    "password": "lead123"
  }')

QA_LEAD_TOKEN=$(echo "$QA_LEAD_LOGIN" | jq -r '.data.token')
echo "QA Lead logged in successfully"
echo "Token: $QA_LEAD_TOKEN"
echo ""

# Step 4: View pending user approvals
echo -e "${YELLOW}Step 4: View pending user approvals${NC}"
PENDING_USERS=$(curl -s -X GET "$API_BASE/api/users/pending" \
  -H "Authorization: Bearer $QA_LEAD_TOKEN")

echo "Pending Approvals:"
echo "$PENDING_USERS" | jq '.'
echo ""

# Step 5: Approve the new user
USER_ID=$(echo "$PENDING_USERS" | jq -r '.data.pendingApprovals[0].id')
if [ "$USER_ID" != "null" ] && [ -n "$USER_ID" ]; then
  echo -e "${YELLOW}Step 5: Approve user $USER_ID${NC}"
  APPROVE_RESPONSE=$(curl -s -X PUT "$API_BASE/api/users/$USER_ID/approve" \
    -H "Authorization: Bearer $QA_LEAD_TOKEN" \
    -H "Content-Type: application/json")

  echo "User Approval Response:"
  echo "$APPROVE_RESPONSE" | jq '.'
  echo ""
else
  echo -e "${RED}No pending users found to approve${NC}"
  exit 1
fi

# Step 6: Verify approved user can now login
echo -e "${YELLOW}Step 6: Verify approved user can now login${NC}"
APPROVED_LOGIN=$(curl -s -X POST "$API_BASE/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "new-qa-engineer",
    "password": "newuser123"
  }')

echo "Approved User Login:"
echo "$APPROVED_LOGIN" | jq '.'
echo ""

# Step 7: Test role management - upgrade user role
echo -e "${YELLOW}Step 7: Test role management - promote user to Senior QA${NC}"
ROLE_CHANGE=$(curl -s -X PUT "$API_BASE/api/users/$USER_ID/role" \
  -H "Authorization: Bearer $QA_LEAD_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "newRole": "senior_qa",
    "reason": "Demonstrated excellent skills during onboarding"
  }')

echo "Role Change Response:"
echo "$ROLE_CHANGE" | jq '.'
echo ""

# Step 8: View all users to see the updated user
echo -e "${YELLOW}Step 8: View all users (admin perspective)${NC}"
ALL_USERS=$(curl -s -X GET "$API_BASE/api/users" \
  -H "Authorization: Bearer $QA_LEAD_TOKEN")

echo "All Users:"
echo "$ALL_USERS" | jq '.'
echo ""

# Step 9: Test access control - regular user trying to access admin functions
echo -e "${YELLOW}Step 9: Test access control - regular user accessing admin functions${NC}"
NEW_USER_TOKEN=$(echo "$APPROVED_LOGIN" | jq -r '.data.token')
ACCESS_DENIED=$(curl -s -X GET "$API_BASE/api/users/pending" \
  -H "Authorization: Bearer $NEW_USER_TOKEN")

echo "Access Control Test (should be denied):"
echo "$ACCESS_DENIED" | jq '.'
echo ""

# Step 10: Test Project Manager permissions
echo -e "${YELLOW}Step 10: Test Project Manager approval permissions${NC}"
PM_LOGIN=$(curl -s -X POST "$API_BASE/api/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "project-manager",
    "password": "pm123"
  }')

PM_TOKEN=$(echo "$PM_LOGIN" | jq -r '.data.token')

# Register another user for PM to manage
REGISTER_PM_TEST=$(curl -s -X POST "$API_BASE/api/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "pm-test-user",
    "password": "pmtest123",
    "email": "pmtest@qaest.com",
    "firstName": "PM",
    "lastName": "TestUser",
    "role": "stakeholder"
  }')

echo "New user registered for PM approval test:"
echo "$REGISTER_PM_TEST" | jq '.'
echo ""

# PM can view pending approvals
PM_PENDING=$(curl -s -X GET "$API_BASE/api/users/pending" \
  -H "Authorization: Bearer $PM_TOKEN")

echo "Project Manager can view pending approvals:"
echo "$PM_PENDING" | jq '.'
echo ""

# Step 11: Test rejection workflow
PM_USER_ID=$(echo "$PM_PENDING" | jq -r '.data.pendingApprovals[0].id')
if [ "$PM_USER_ID" != "null" ] && [ -n "$PM_USER_ID" ]; then
  echo -e "${YELLOW}Step 11: Test user rejection workflow${NC}"
  REJECT_RESPONSE=$(curl -s -X PUT "$API_BASE/api/users/$PM_USER_ID/reject" \
    -H "Authorization: Bearer $PM_TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
      "reason": "Stakeholder role requires additional verification process"
    }')

  echo "User Rejection Response:"
  echo "$REJECT_RESPONSE" | jq '.'
  echo ""

  # Test rejected user cannot login
  REJECTED_LOGIN=$(curl -s -X POST "$API_BASE/api/auth/login" \
    -H "Content-Type: application/json" \
    -d '{
      "username": "pm-test-user",
      "password": "pmtest123"
    }')

  echo "Rejected User Login Attempt (should fail):"
  echo "$REJECTED_LOGIN" | jq '.'
  echo ""
fi

echo -e "${GREEN}‚úÖ Complete User Approval System Test Finished!${NC}"
echo ""
echo -e "${BLUE}Summary of Tested Features:${NC}"
echo "1. ‚úÖ User registration with automatic approval requirement"
echo "2. ‚úÖ Login blocked for unapproved users"
echo "3. ‚úÖ QA Lead authentication and admin access"
echo "4. ‚úÖ Pending user approval dashboard"
echo "5. ‚úÖ User approval workflow with audit trail"
echo "6. ‚úÖ Approved user login access"
echo "7. ‚úÖ Role management and promotion system"
echo "8. ‚úÖ Admin user management interface"
echo "9. ‚úÖ Access control for regular users"
echo "10. ‚úÖ Project Manager approval permissions"
echo "11. ‚úÖ User rejection workflow with reasons"
echo "12. ‚úÖ Rejected user login prevention"
echo ""
echo -e "${PURPLE}üéØ User Approval System Features Verified:${NC}"
echo "‚Ä¢ Comprehensive approval workflow"
echo "‚Ä¢ Role-based access control"
echo "‚Ä¢ Admin approval interface"
echo "‚Ä¢ User role management"
echo "‚Ä¢ Audit trail and tracking"
echo "‚Ä¢ Multi-role admin support (QA Lead + Project Manager)"
echo "‚Ä¢ Security and access control"
echo "‚Ä¢ Complete user lifecycle management"
echo ""
echo -e "${YELLOW}üåê Frontend Testing:${NC}"
echo "‚Ä¢ Open http://localhost:3000 to test the UI"
echo "‚Ä¢ Login as 'qa-lead' or 'project-manager' to access User Management"
echo "‚Ä¢ Register new users to test the approval workflow"
echo "‚Ä¢ Experience the complete approval system in the web interface"
echo ""
echo -e "${GREEN}üöÄ QAest User Approval System is fully functional!${NC}" 